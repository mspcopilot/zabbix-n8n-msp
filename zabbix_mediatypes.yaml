# This file is used for integrating Zabbix with n8n for sending alerts and ticketing events. 
# For comprehensive setup instructions, best practices, and updates, visit: https://mspcopilot.io/

zabbix_export:
  version: '7.0'
  media_types:
    - name: 'n8n'
      type: WEBHOOK
      parameters:
        - name: action_id
          value: '{ACTION.ID}'
        - name: action_name
          value: '{ACTION.NAME}'
        - name: alert_message
          value: '{ALERT.MESSAGE}'
        - name: alert_sendto
          value: '{ALERT.SENDTO}'
        - name: alert_subject
          value: '{ALERT.SUBJECT}'
        - name: esc_history
          value: '{ESC.HISTORY}'
        - name: event_cause_id
          value: '{EVENT.CAUSE.ID}'
        - name: event_cause_name
          value: '{EVENT.CAUSE.NAME}'
        - name: event_id
          value: '{EVENT.ID}'
        - name: event_name
          value: '{EVENT.NAME}'
        - name: event_nseverity
          value: '{EVENT.NSEVERITY}'
        - name: event_recovery_tags
          value: '{EVENT.RECOVERY.TAGSJSON}'
        - name: event_recovery_value
          value: '{EVENT.RECOVERY.VALUE}'
        - name: event_severity
          value: '{EVENT.SEVERITY}'
        - name: event_source
          value: '{EVENT.SOURCE}'
        - name: event_status
          value: '{EVENT.STATUS}'
        - name: event_symptoms
          value: '{EVENT.SYMPTOMS}'
        - name: event_tags
          value: '{EVENT.TAGSJSON}'
        - name: event_update_action
          value: '{EVENT.UPDATE.ACTION}'
        - name: event_update_message
          value: '{EVENT.UPDATE.MESSAGE}'
        - name: event_update_status
          value: '{EVENT.UPDATE.STATUS}'
        - name: event_value
          value: '{EVENT.VALUE}'
        - name: host_conn
          value: '{HOST.CONN}'
        - name: host_description
          value: '{HOST.DESCRIPTION}'
        - name: host_dns
          value: '{HOST.DNS}'
        - name: host_host
          value: '{HOST.HOST}'
        - name: host_id
          value: '{HOST.ID}'
        - name: host_ip
          value: '{HOST.IP}'
        - name: host_name
          value: '{HOST.NAME}'
        - name: host_port
          value: '{HOST.PORT}'
        - name: inventory_asset_tag
          value: '{INVENTORY.ASSET.TAG}'
        - name: inventory_macaddress_a
          value: '{INVENTORY.MACADDRESS.A}'
        - name: inventory_macaddress_b
          value: '{INVENTORY.MACADDRESS.B}'
        - name: item_lastvalue
          value: '{ITEM.LASTVALUE}'
        - name: item_value
          value: '{ITEM.VALUE}'
        - name: trigger_id
          value: '{TRIGGER.ID}'
        - name: trigger_name
          value: '{TRIGGER.NAME}'
        - name: trigger_status
          value: '{TRIGGER.STATUS}'
        - name: trigger_url
          value: '{TRIGGER.URL}'
        - name: trigger_value
          value: '{TRIGGER.VALUE}'
        - name: webhook_url
          value: 'https://n8n.YOURMSP.COM/webhook/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
        - name: zabbix_url
          value: '{$ZABBIX_URL}'
      max_sessions: '10'
      attempts: '5'
      attempt_interval: 60s
      script: |
        /*
        This script is used for integrating Zabbix with n8n for sending alerts and ticketing events. 
        For comprehensive setup instructions, best practices, and updates, visit: https://mspcopilot.io/
        */

        try {
            // Logging the start of the webhook script execution
            Zabbix.log(5, 'n8n Webhook: Debug: Raw input params: ' + value);

            // Parse the input parameters passed as a JSON string
            var params = JSON.parse(value),
                req = new HttpRequest(),
                resp;

            Zabbix.log(4, 'n8n Webhook: Sending request to URL: ' + params.webhook_url);

            // Optional: Configure HTTP proxy if it's specified in the parameters
            if (params.HTTPProxy) {
                Zabbix.log(4, 'n8n Webhook: Using HTTP proxy: ' + params.HTTPProxy);
                req.setProxy(params.HTTPProxy);
            }

            // 'Content-Type' is set as application/json for JSON payload
            req.addHeader('Content-Type: application/json');

            // Posting the data to the specified webhook URL
            Zabbix.log(5, 'n8n Webhook: Debug: Request payload: ' + JSON.stringify(params));
            resp = req.post(params.webhook_url, JSON.stringify(params));

            // Check the response status code. Adjust the success condition based on your webhook's success criteria
            if (req.getStatus() < 200 || req.getStatus() >= 300) {
                Zabbix.log(2, 'n8n Webhook: Error: HTTP status code ' + req.getStatus() + ' received from server');
                Zabbix.log(2, 'n8n Webhook: Error response body: ' + resp);
                throw 'n8n Webhook: Response code: ' + req.getStatus() + ', Response body: ' + resp.substring(0, 150);
            }

            Zabbix.log(4, 'n8n Webhook: Received HTTP ' + req.getStatus() + ' response from server');

            try {
                // Attempt to parse the JSON response
                if (resp === "No Customer Tag") {
                    Zabbix.log(3, 'n8n Webhook: Warning: No customer tag found on problem trigger');
                    throw 'No customer tag on problem trigger';
                }
                
                // Parse returned JSON
                resp = JSON.parse(resp);
                Zabbix.log(4, 'n8n Webhook: Successfully parsed webhook response');
                Zabbix.log(5, 'n8n Webhook: Debug: Full response: ' + JSON.stringify(resp));
                
                return JSON.stringify(resp);
            } catch (error) {
                // Handle parsing errors and just return blank object.
                Zabbix.log(2, 'n8n Webhook: Error parsing JSON response: ' + error);
                Zabbix.log(3, 'n8n Webhook: Raw response that failed to parse: ' + resp);
                return {"Tags": {"media_error": "Could not parse tags."}};
            }
        }
        catch (error) {
            // Log the error details and rethrow the error for Zabbix to catch
            Zabbix.log(2, 'n8n Webhook: Webhook sending failed: ' + error);
            throw 'Failed with error: ' + error;
        }
      timeout: '15'
      process_tags: 'YES'
      show_event_menu: 'YES'
      event_menu_url: 'https://mtx.link/{EVENT.TAGS.ticket}'
      event_menu_name: 'Nilear MTX'
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
